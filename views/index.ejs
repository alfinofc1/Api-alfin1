<!DOCTYPE html>
<html lang="id" class="dark">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>alfin - Fun & Tools API</title>
    <meta name="description" content="alfin - Kumpulan API gratis dan modern untuk kebutuhan bot WhatsApp, Telegram, dan Web.">
    <meta name="keywords" content="REST API, dokumentasi API, free API, alfin, endpoint, API documentation, web API, fetch API, modern API, aesthetic API, tailwind css, fun tools api">
    <meta name="author" content="alfin Developer">
    <meta name="robots" content="index, follow">
    <meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests">
    <meta property="og:title" content="alfin - Fun & Tools API Documentation">
    <meta property="og:description" content="alfin - Kumpulan API gratis dan modern untuk kebutuhan bot WhatsApp, Telegram, dan Web.">
    <meta property="og:type" content="website">
    <meta property="og:url" content="https://alfin-api.koyeb.app">
    <meta property="og:image" content="https://alfin-api.koyeb.app/favicon.ico">
    <link rel="icon" href="https://alfin-api.koyeb.app/favicon.ico" type="image/x-icon">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer">
    <script src="https://cdn.tailwindcss.com?plugins=forms"></script>
    <style type="text/tailwindcss">
        body { font-family: 'Poppins', sans-serif; }
        ::-webkit-scrollbar { width: 8px; height: 8px;}
        ::-webkit-scrollbar-track { background: #1f2937; }
        ::-webkit-scrollbar-thumb { background: #4b5563; border-radius: 4px;}
        ::-webkit-scrollbar-thumb:hover { background: #6b7280; }
        .tag-active { background-color: #1e40af; color: white; font-weight: 600; }
        .modal-backdrop { background-color: rgba(17, 24, 39, 0.85); backdrop-filter: blur(3px); -webkit-backdrop-filter: blur(3px); }
        .modal { max-height: 90vh; }
        .btn-copy-feedback { background-color: #059669 !important; color: white !important; }
        pre {
            white-space: pre-wrap; word-wrap: break-word; background-color: #030712;
            border: 1px solid #1f2937; padding: 12px; border-radius: 8px;
            overflow-x: auto; color: #d1d5db; font-family: 'Menlo', 'Monaco', 'Consolas', "Liberation Mono", "Courier New", monospace;
            font-size: 0.875rem; max-height: 400px;
        }
        .response-area { position: relative; margin-bottom: 1rem; }
        .response-area .btn-copy {
            position: absolute; right: 10px; top: 10px; z-index: 10;
            background: rgba(55, 65, 81, 0.6); border: 1px solid rgba(75, 85, 99, 0.5);
            color: #cbd5e1; padding: 3px 8px; font-size: 0.75rem; border-radius: 6px;
            opacity: 0.7; transition: opacity 0.2s ease, background-color 0.2s ease; cursor: pointer;
        }
        .response-area .btn-copy:hover { opacity: 1; background: rgba(75, 85, 99, 0.8); }
        #responseBodyContainer img, #responseBodyContainer video, #responseBodyContainer audio {
            max-width: 100%; height: auto; display: block; margin-top: 12px; border-radius: 8px; background-color: #030712;
        }
        #responseBodyContainer audio { width: 100%; min-height: 54px; }
        #responseBodyContainer {
            border: 1px solid #1f2937; border-radius: 8px; background-color: #030712; padding: 12px;
        }
        #responseBodyContainer > pre:only-child { margin: -12px; }
        .sidebar-transition { transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1); }
        .endpoint-card { background-color: #111827; }
        .endpoint-card:hover { border-color: #2563eb; box-shadow: 0 0 15px rgba(37, 99, 235, 0.3); }
        .api-path-display { font-family: 'Menlo', 'Monaco', 'Consolas', "Liberation Mono", "Courier New", monospace; }
    </style>
</head>
<body class="bg-gray-950 text-gray-300">
    <div class="flex h-screen overflow-hidden">
        <aside id="sidebar" class="sidebar-transition fixed inset-y-0 left-0 z-30 w-72 bg-gray-900 border-r border-gray-800 transform -translate-x-full lg:translate-x-0 lg:static lg:inset-0 overflow-y-auto">
            <div class="flex items-center justify-between p-5 border-b border-gray-800 sticky top-0 bg-gray-900 z-10">
                <div class="flex items-center space-x-3">
                    <img src="https://alfin-api.koyeb.app/favicon.ico" alt="Logo alfin" class="h-10 w-10 rounded-full shadow-lg border-2 border-blue-500">
                    <h1 class="text-xl font-semibold text-white">alfin API</h1>
                </div>
                <button id="sidebar-close" class="lg:hidden text-gray-500 hover:text-white transition-colors"><i class="fas fa-times text-2xl"></i></button>
            </div>
            <div class="p-5 space-y-6">
                <div class="relative">
                    <span class="absolute inset-y-0 left-0 flex items-center pl-3.5"><i class="fas fa-search text-gray-500"></i></span>
                    <input type="text" id="searchEndpoint" class="w-full pl-10 pr-4 py-2.5 bg-gray-800 border border-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent placeholder-gray-500 text-sm shadow-sm" placeholder="Cari endpoint...">
                </div>
                <nav class="mt-6">
                    <h3 class="px-2 text-xs font-semibold text-gray-500 uppercase tracking-wider mb-2">Kategori API</h3>
                    <div id="tagButtons" class="space-y-1.5">
                        <div class="px-3 py-2.5 text-sm text-gray-600">Memuat kategori...</div>
                    </div>
                </nav>
            </div>
        </aside>

        <main class="flex-1 flex flex-col overflow-hidden">
            <header class="lg:hidden flex items-center justify-between p-4 bg-gray-900 border-b border-gray-800 shadow-md sticky top-0 z-20">
                <button id="sidebar-open" class="text-gray-300 hover:text-white transition-colors"><i class="fas fa-bars text-2xl"></i></button>
                <div class="flex items-center space-x-2">
                    <img src="https://alfin-api.koyeb.app/favicon.ico" alt="Logo alfin" class="h-8 w-8 rounded-full border border-blue-500">
                    <span class="font-semibold text-white">alfin API</span>
                </div>
                <div class="w-8"></div>
            </header>
            <div class="flex-1 overflow-y-auto p-4 lg:p-8 bg-gray-950">
                <div id="endpointListSection" class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-5 lg:gap-6">
                    <div class="loading-placeholder col-span-full flex flex-col items-center justify-center h-64 text-gray-600">
                        <svg class="animate-spin h-12 w-12 text-blue-500 mb-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        <p class="text-lg">Sedang memuat daftar endpoint keren...</p>
                    </div>
                </div>
            </div>
            <footer class="text-center py-5 px-4 bg-gray-900 border-t border-gray-800 text-sm text-gray-500">
                <p>Â© 2025 alfin. API tetap ngebut selama Koyeb masih baik hati! ðŸ’¨</p>
                <p>Info & Update: <a href="https://whatsapp.com/channel/0029Vb3qLJRDuMRdjacRwe2T" target="_blank" rel="noopener noreferrer" class="text-blue-400 hover:text-blue-300 hover:underline"><i class="fab fa-whatsapp"></i> Saluran WhatsApp alfin</a></p>
            </footer>
        </main>
    </div>

    <div id="tryModal" class="fixed inset-0 z-40 overflow-y-auto hidden" aria-labelledby="tryModalLabel" role="dialog" aria-modal="true">
        <div class="flex items-end sm:items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <div class="fixed inset-0 transition-opacity modal-backdrop" aria-hidden="true"></div>
            <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">â€‹</span>
            <div class="modal inline-block align-bottom bg-gray-900 rounded-lg text-left overflow-hidden shadow-2xl transform transition-all sm:my-8 sm:align-middle sm:max-w-3xl w-full flex flex-col border border-gray-700">
                <div class="bg-gray-900 px-4 pt-5 pb-4 sm:p-6 sm:pb-4 border-b border-gray-800 sticky top-0 z-10">
                    <div class="sm:flex sm:items-center">
                        <div class="mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-blue-600/20 sm:mx-0 sm:h-10 sm:w-10 border border-blue-500"><i class="fas fa-vial text-blue-400 text-xl"></i></div>
                        <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left w-full">
                            <h3 class="text-lg leading-6 font-medium text-blue-400" id="tryModalLabel">Uji Coba Endpoint</h3>
                        </div>
                        <button type="button" class="absolute top-4 right-4 text-gray-500 hover:text-gray-300 transition-colors" data-modal-hide="tryModal"><i class="fas fa-times text-2xl"></i></button>
                    </div>
                </div>
                <div class="px-4 py-5 sm:p-6 flex-1 overflow-y-auto space-y-6">
                    <div id="parameterInputs">
                    </div>
                    <button id="runButton" class="w-full inline-flex items-center justify-center rounded-md border border-transparent shadow-sm px-4 py-2.5 bg-blue-600 text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 focus:ring-offset-gray-900 sm:text-sm transition duration-150 ease-in-out">
                        <i class="fas fa-play fa-fw mr-2 -ml-1"></i>Jalankan Permintaan
                    </button>
                    <div id="loadingIndicator" class="text-center py-3 text-gray-500" style="display:none">
                        <svg class="animate-spin inline-block h-5 w-5 text-blue-400 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        <span>Sedang Memproses...</span>
                    </div>
                    <div id="resultUrl" class="mt-4" style="display:none">
                        <h5 class="text-sm font-medium text-gray-400 mb-1.5">URL Permintaan Lengkap:</h5>
                        <div class="response-area">
                            <button class="btn-copy" data-clipboard-target="#finalUrlText" title="Salin URL"><i class="far fa-copy"></i></button>
                            <pre class="text-xs api-path-display"><code id="finalUrlText"></code></pre>
                        </div>
                    </div>
                    <div id="apiResponse" class="mt-4 space-y-4" style="display:none">
                        <div>
                            <h5 class="text-sm font-medium text-gray-400 mb-1.5">Response Header:</h5>
                            <div class="response-area">
                                <button class="btn-copy" data-clipboard-target="#responseHeader" title="Salin Header"><i class="far fa-copy"></i></button>
                                <pre id="responseHeader" class="text-xs"></pre>
                            </div>
                        </div>
                        <div>
                            <h5 class="text-sm font-medium text-gray-400 mb-1.5">Response Body:</h5>
                            <div class="response-area">
                                <button class="btn-copy btn-copy-body" title="Salin Body" style="display:none"><i class="far fa-copy"></i></button>
                                <div id="responseBodyContainer"></div>
                            </div>
                        </div>
                    </div>
                    <div id="axiosExample" class="mt-4" style="display:none">
                        <h5 class="text-sm font-medium text-gray-400 mb-1.5">Contoh Kode Axios (GET):</h5>
                        <div class="response-area">
                            <button class="btn-copy" data-clipboard-target="#axiosSnippet code" title="Salin Kode"><i class="far fa-copy"></i></button>
                            <pre id="axiosSnippet" class="text-xs"><code></code></pre>
                        </div>
                    </div>
                </div>
                <div class="bg-gray-900 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse border-t border-gray-800 sticky bottom-0 z-10">
                    <button type="button" data-modal-hide="tryModal" class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-700 shadow-sm px-4 py-2 bg-gray-800 text-base font-medium text-gray-300 hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 focus:ring-offset-gray-900 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm transition-colors">Tutup</button>
                </div>
            </div>
        </div>
    </div>

    <div id="whatsappModal" class="fixed inset-0 z-50 overflow-y-auto hidden" aria-labelledby="whatsappModalLabel" role="dialog" aria-modal="true">
        <div class="flex items-center justify-center min-h-screen px-4 text-center">
            <div class="fixed inset-0 transition-opacity modal-backdrop" aria-hidden="true"></div>
            <div class="inline-block align-bottom bg-gray-900 rounded-lg text-left overflow-hidden shadow-2xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg w-full border border-gray-700">
                <div class="bg-gray-900 px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                    <div class="sm:flex sm:items-start">
                        <div class="mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-green-600/20 sm:mx-0 sm:h-10 sm:w-10 border border-green-500"><i class="fab fa-whatsapp text-green-400 text-2xl"></i></div>
                        <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left">
                            <h3 class="text-lg leading-6 font-medium text-green-400" id="whatsappModalLabel">info</h3>
                            <div class="mt-2">
                                <p class="text-sm text-gray-400">update ui website dan limit api.</p>
                            </div>
                        </div>
                        <button type="button" class="absolute top-4 right-4 text-gray-500 hover:text-gray-300 transition-colors" data-modal-hide="whatsappModal"><i class="fas fa-times text-2xl"></i></button>
                    </div>
                </div>
                <div class="bg-gray-900 px-4 py-4 sm:px-6 sm:flex sm:flex-row-reverse space-y-2 sm:space-y-0 sm:space-x-reverse sm:space-x-3 border-t border-gray-800">
                    <a href="https://wa.me//6283898083663" target="_blank" rel="noopener noreferrer" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-green-600 text-base font-medium text-white hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 focus:ring-offset-gray-900 sm:w-auto sm:text-sm transition-colors"><i class="fab fa-whatsapp mr-2 -ml-1"></i>chat owner</a>
                    <button type="button" data-modal-hide="whatsappModal" class="w-full inline-flex justify-center rounded-md border border-gray-700 shadow-sm px-4 py-2 bg-gray-800 text-base font-medium text-gray-300 hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 focus:ring-offset-gray-900 sm:w-auto sm:text-sm transition-colors">Nanti Aja Deh</button>
                </div>
            </div>
        </div>
    </div>

    <audio id="successSound" src="/success.mp3" preload="auto"></audio>
    <audio id="errorSound" src="/error.mp3" preload="auto"></audio>

    <script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/2.0.11/clipboard.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            
            //Silahkan ganti base domain sama punya MU ya
            
            /*----------------------*/
            const BASE_DOMAIN = 'https://alfin-api.koyeb.app';
            /*----------------------*/
            
            let finalApiUrl = '';
            let isFetching = false;
            let currentEndpointData = null;
            let clipboard;
            let activeTag = '';
            let allAvailableTags = [];

            const sidebar = document.getElementById('sidebar');
            const sidebarOpenBtn = document.getElementById('sidebar-open');
            const sidebarCloseBtn = document.getElementById('sidebar-close');
            const endpointListSection = document.getElementById('endpointListSection');
            const searchEndpointInput = document.getElementById('searchEndpoint');
            const tagButtonsContainer = document.getElementById('tagButtons');
            const tryModalElement = document.getElementById('tryModal');
            const parameterInputsDiv = document.getElementById('parameterInputs');
            const runButton = document.getElementById('runButton');
            const responseHeaderPre = document.getElementById('responseHeader');
            const responseBodyContainer = document.getElementById('responseBodyContainer');
            const axiosSnippetPre = document.getElementById('axiosSnippet').querySelector('code');
            const loadingIndicator = document.getElementById('loadingIndicator');
            const apiResponseDiv = document.getElementById('apiResponse');
            const axiosExampleDiv = document.getElementById('axiosExample');
            const resultUrlDiv = document.getElementById('resultUrl');
            const finalUrlTextCode = document.getElementById('finalUrlText');
            const copyResponseBodyBtn = tryModalElement.querySelector('.btn-copy-body');
            const whatsappModalElement = document.getElementById('whatsappModal');

            const successSound = document.getElementById('successSound');
            const errorSound = document.getElementById('errorSound');

            clipboard = new ClipboardJS('.btn-copy');
            clipboard.on('success', function(e) {
                const originalIcon = e.trigger.innerHTML;
                const originalTitle = e.trigger.getAttribute('title');
                e.trigger.innerHTML = '<i class="fas fa-check text-emerald-400"></i> Disalin!';
                e.trigger.setAttribute('title', 'Berhasil disalin!');
                e.trigger.classList.add('btn-copy-feedback');
                setTimeout(() => {
                    e.trigger.innerHTML = originalIcon;
                    e.trigger.setAttribute('title', originalTitle);
                    e.trigger.classList.remove('btn-copy-feedback');
                }, 1500);
                e.clearSelection();
            });
            clipboard.on('error', function(e) {
                const originalTitle = e.trigger.getAttribute('title');
                e.trigger.setAttribute('title', 'Gagal menyalin');
                e.trigger.classList.add('text-red-500');
                setTimeout(() => {
                    e.trigger.setAttribute('title', originalTitle);
                    e.trigger.classList.remove('text-red-500');
                }, 1500);
            });

            setTimeout(() => {
                if (whatsappModalElement && !localStorage.getItem('whatsappModalDismissed_v1')) {
                    showModal(whatsappModalElement);
                }
            }, 5000);

            function debounce(func, wait) {
                let timeout;
                return function(...args) {
                    clearTimeout(timeout);
                    timeout = setTimeout(() => func.apply(this, args), wait);
                };
            }

            function generateEndpointsHTML(endpointsArray) {
                if (!Array.isArray(endpointsArray) || endpointsArray.length === 0) {
                    return `<p class="col-span-full text-center text-gray-600 italic mt-8 text-lg">Yah, endpoint yang dicari gak ketemu nih.</p>`;
                }
                let html = '';
                endpointsArray.forEach(ep => {
                    const name = ep.nama || 'Endpoint Tanpa Nama';
                    const path = ep.endpoint || '/error-path-tidak-ada';
                    const tags = (Array.isArray(ep.tags) ? ep.tags : []).filter(t => t && typeof t === 'string');
                    const description = ep.deskripsi || '<span class="italic text-gray-500">Deskripsi belum tersedia.</span>';
                    const escapedData = JSON.stringify(ep).replace(/'/g, "\\'");
                    html += `
                        <div class="endpoint-card rounded-xl shadow-lg overflow-hidden border border-gray-800 hover:border-blue-600 transition duration-300 ease-in-out transform hover:-translate-y-1">
                            <div class="px-5 py-4 border-b border-gray-800">
                                <h3 class="text-md font-semibold text-blue-400 truncate" title="${name}">${name}</h3>
                            </div>
                            <div class="p-5 space-y-3">
                                <div class="api-path-display bg-gray-950 p-2.5 rounded-md border border-gray-700 flex flex-col sm:flex-row justify-between items-start sm:items-center space-y-2 sm:space-y-0 shadow-sm">
                                    <span class="text-xs text-gray-400 break-all flex-1 mr-2">${path}</span>
                                    <div class="flex space-x-2 flex-shrink-0 w-full sm:w-auto justify-end">
                                        <button class="btn-copy-url text-xs bg-gray-700 hover:bg-gray-600 text-gray-300 px-2.5 py-1.5 rounded-md transition duration-150 shadow-sm" data-clipboard-text="${BASE_DOMAIN}${path}" title="Salin URL Lengkap">
                                            <i class="far fa-copy mr-1.5"></i> URL
                                        </button>
                                        <button class="try-button text-xs bg-blue-600 hover:bg-blue-700 text-white px-2.5 py-1.5 rounded-md transition duration-150 shadow-sm" data-endpoint='${escapedData}' title="Coba Endpoint Ini">
                                            <i class="fas fa-vial mr-1.5"></i> Coba
                                        </button>
                                    </div>
                                </div>
                                <p class="text-sm text-gray-400 leading-relaxed min-h-[40px]">${description}</p>
                                <div class="flex flex-wrap gap-1.5 pt-1">
                                    ${tags.map(t => `<span class="bg-blue-500/20 border border-blue-500/30 text-blue-400 text-xs font-medium px-2.5 py-1 rounded-full">${t}</span>`).join('')}
                                </div>
                            </div>
                        </div>`;
                });
                return html;
            }
            
            function fetchData(urlPath) {
                if (isFetching) return;
                isFetching = true;
                endpointListSection.innerHTML = `
                    <div class="loading-placeholder col-span-full flex flex-col items-center justify-center h-64 text-gray-600">
                        <svg class="animate-spin h-12 w-12 text-blue-500 mb-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        <p class="text-lg">Lagi ambil data API...</p>
                    </div>`;
                fetch(urlPath)
                    .then(response => {
                        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                        return response.json();
                    })
                    .then(jsonData => {
                        if (jsonData && Array.isArray(jsonData.endpoints)) {
                            endpointListSection.innerHTML = generateEndpointsHTML(jsonData.endpoints);
                            new ClipboardJS('.btn-copy-url');
                        } else if (jsonData && typeof jsonData === 'object' && !jsonData.endpoints && jsonData.error) {
                             endpointListSection.innerHTML = `<p class="col-span-full text-center text-yellow-500 font-semibold mt-6">Info: ${jsonData.error}</p>`;
                        } else if (jsonData && typeof jsonData === 'object' && !jsonData.endpoints) {
                            endpointListSection.innerHTML = generateEndpointsHTML([]);
                        } else {
                            throw new Error('Invalid data structure received. Expected an object with an "endpoints" array.');
                        }
                    })
                    .catch(error => {
                        console.error('Fetch error:', error);
                        let errorMessage = `Waduh, gagal muat endpoint nih. Coba lagi nanti ya. (${error.message})`;
                        if (error instanceof SyntaxError) {
                            errorMessage = `Gagal muat endpoint: Servernya ngasih data aneh, bukan JSON. (${error.message})`;
                        } else if (error.message.includes('Invalid data structure')) {
                            errorMessage = `Gagal muat endpoint: Format datanya gak sesuai. (${error.message})`;
                        }
                        endpointListSection.innerHTML = `<p class="col-span-full text-center text-red-500 font-semibold mt-6">${errorMessage}</p>`;
                    })
                    .finally(() => { isFetching = false; });
            }

            function updateTagButtonsUI() {
                const tagLinks = tagButtonsContainer.querySelectorAll('a.tag-link');
                tagLinks.forEach(link => {
                    if (link.getAttribute('data-tags') === activeTag) {
                        link.classList.add('tag-active', 'bg-gray-800');
                    } else {
                        link.classList.remove('tag-active', 'bg-gray-800');
                    }
                });
            }

            function renderTagButtons() {
                let html = `<a href="#" data-tags="" class="tag-link group flex items-center px-3 py-2.5 text-sm font-medium rounded-md text-gray-300 hover:bg-gray-800 hover:text-blue-400 transition-colors">
                                <i class="fas fa-grip-horizontal fa-fw mr-3 text-gray-500 group-hover:text-blue-400"></i> Semua Kategori
                            </a>`;
                if (allAvailableTags.length > 0) {
                    allAvailableTags.forEach(tag => {
                        html += `<a href="#" data-tags="${tag}" class="tag-link group flex items-center px-3 py-2.5 text-sm font-medium rounded-md text-gray-300 hover:bg-gray-800 hover:text-blue-400 transition-colors">
                                    <i class="fas fa-tag fa-fw mr-3 text-gray-500 group-hover:text-blue-400"></i> ${tag}
                                 </a>`;
                    });
                } else {
                    html += '<div class="px-3 py-2.5 text-sm text-gray-600 italic">Tidak ada kategori.</div>';
                }
                tagButtonsContainer.innerHTML = html;
                updateTagButtonsUI();
            }
            
            function loadTags() {
                fetch('/tags')
                    .then(res => {
                        if (!res.ok) throw new Error('Gagal memuat kategori');
                        return res.json();
                    })
                    .then(data => {
                        allAvailableTags = (data && data.tags && Array.isArray(data.tags)) ? data.tags.sort((a, b) => a.localeCompare(b)) : [];
                        renderTagButtons();
                    })
                    .catch(error => {
                        console.error("Error loading tags:", error);
                        tagButtonsContainer.innerHTML = '<div class="px-3 py-2.5 text-sm text-red-500">Gagal memuat kategori.</div>';
                    });
            }

            function showModal(modalElement) {
                if (modalElement) {
                    modalElement.classList.remove('hidden');
                    document.body.classList.add('overflow-hidden');
                    gsap.fromTo(modalElement.querySelector('.modal-backdrop'), {opacity:0}, {opacity:1, duration:0.3});
                    gsap.fromTo(modalElement.querySelector('.transform'), {opacity:0, scale:0.95, y:20}, {opacity:1, scale:1, y:0, duration:0.3, ease:'back.out(1.7)'});
                }
            }

            function hideModal(modalElement, persistDismiss = false) {
                if (modalElement && !modalElement.classList.contains('hidden')) {
                    gsap.to(modalElement.querySelector('.transform'), {opacity:0, scale:0.95, y:20, duration:0.2, ease:'power1.in'});
                    gsap.to(modalElement.querySelector('.modal-backdrop'), {opacity:0, duration:0.3, delay:0.1, onComplete: () => {
                        modalElement.classList.add('hidden');
                         if (persistDismiss && modalElement.id === 'whatsappModal') {
                            localStorage.setItem('whatsappModalDismissed_v1', 'true');
                        }
                        if (!document.querySelector('.fixed.inset-0.z-40:not(.hidden), .fixed.inset-0.z-50:not(.hidden)')) {
                            document.body.classList.remove('overflow-hidden');
                        }
                    }});
                }
            }

            function setupModalTriggers() {
                document.querySelectorAll('[data-modal-hide]').forEach(button => {
                    button.addEventListener('click', () => {
                        const modalId = button.getAttribute('data-modal-hide');
                        const modal = document.getElementById(modalId);
                        const persist = (modalId === 'whatsappModal' && button.textContent.toLowerCase().includes('nanti'));
                        hideModal(modal, persist);
                    });
                });
                 document.querySelectorAll('.modal-backdrop').forEach(backdrop => {
                     backdrop.addEventListener('click', (event) => {
                        const modal = event.target.closest('.fixed.inset-0');
                         if (modal && modal.contains(event.target) && event.target === backdrop) {
                            const persist = modal.id === 'whatsappModal';
                            hideModal(modal, persist);
                         }
                     });
                 });
            }

            function resetModalOutput() {
                responseHeaderPre.textContent = '';
                responseBodyContainer.innerHTML = '';
                axiosSnippetPre.textContent = '';
                finalUrlTextCode.textContent = '';
                apiResponseDiv.style.display = 'none';
                axiosExampleDiv.style.display = 'none';
                resultUrlDiv.style.display = 'none';
                if(copyResponseBodyBtn) copyResponseBodyBtn.style.display = 'none';
                finalApiUrl = '';
                const mediaElements = responseBodyContainer.querySelectorAll('img[src^="blob:"], video[src^="blob:"], audio[src^="blob:"]');
                mediaElements.forEach(el => { if (el.src) { try { URL.revokeObjectURL(el.src); } catch(e) { console.warn("Could not revoke", el.src, e); } } });
                const downloadLinks = responseBodyContainer.querySelectorAll('a[href^="blob:"]');
                downloadLinks.forEach(a => { if (a.href) { try { URL.revokeObjectURL(a.href); } catch(e) { console.warn("Could not revoke", a.href, e); } } });
            }

            function openTryModal(endpoint) {
                currentEndpointData = endpoint;
                parameterInputsDiv.innerHTML = '';
                resetModalOutput();
                document.getElementById('tryModalLabel').textContent = `Uji Coba: ${endpoint.nama}`;
                if (endpoint.parameter && Array.isArray(endpoint.parameter) && endpoint.parameter.length > 0) {
                    parameterInputsDiv.innerHTML += `<h4 class="text-md font-medium text-gray-400 mb-3">Parameter Permintaan</h4>`;
                    endpoint.parameter.forEach(param => {
                        const paramName = param.params;
                        const defaultValue = param.example || '';
                        const isRequired = (param.opsional === false);
                        const inputId = `param-${paramName.replace(/[^a-zA-Z0-9-_]/g, '')}`;
                        const placeholder = param.deskripsi || (defaultValue ? `Contoh: ${defaultValue}` : `Masukkan ${paramName}`);
                        const div = document.createElement('div');
                        div.className = 'mb-4';
                        const label = document.createElement('label');
                        label.htmlFor = inputId;
                        label.className = 'block text-sm font-medium text-gray-300 mb-1.5';
                        label.innerHTML = `${paramName} ${isRequired ? '<span class="text-red-500 font-semibold">*</span>' : '<span class="text-xs text-gray-500">(opsional)</span>'}`;
                        const input = document.createElement('input');
                        input.type = 'text';
                        input.className = 'w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent placeholder-gray-500 text-sm shadow-sm';
                        input.id = inputId;
                        input.name = paramName;
                        input.placeholder = placeholder;
                        input.value = defaultValue;
                        if (isRequired) input.required = true;
                        div.appendChild(label);
                        div.appendChild(input);
                        parameterInputsDiv.appendChild(div);
                    });
                } else {
                    parameterInputsDiv.innerHTML = `<p class="text-sm text-gray-500 italic">Endpoint ini tidak memerlukan parameter tambahan.</p>`;
                }
                showModal(tryModalElement);
            }

            if (sidebarOpenBtn) {
                sidebarOpenBtn.addEventListener('click', () => {
                    sidebar.classList.remove('-translate-x-full');
                    sidebar.classList.add('shadow-2xl');
                });
            }
            if (sidebarCloseBtn) {
                sidebarCloseBtn.addEventListener('click', () => {
                    sidebar.classList.add('-translate-x-full');
                    sidebar.classList.remove('shadow-2xl');
                });
            }
            document.addEventListener('click', (e) => {
                if (!sidebar.contains(e.target) && sidebarOpenBtn && !sidebarOpenBtn.contains(e.target) && window.innerWidth < 1024) {
                     if (!sidebar.classList.contains('-translate-x-full')) {
                        sidebar.classList.add('-translate-x-full');
                        sidebar.classList.remove('shadow-2xl');
                     }
                }
            });

            const debouncedSearch = debounce(function() {
                const searchTerm = searchEndpointInput.value.trim();
                activeTag = '';
                updateTagButtonsUI();
                const urlPath = searchTerm ? `/search?term=${encodeURIComponent(searchTerm)}` : '/renderpage?tags=';
                fetchData(urlPath);
            }, 350);
            searchEndpointInput.addEventListener('input', debouncedSearch);

            tagButtonsContainer.addEventListener('click', function(e) {
                e.preventDefault();
                const tagLink = e.target.closest('a.tag-link');
                if (tagLink) {
                    activeTag = tagLink.getAttribute('data-tags');
                    searchEndpointInput.value = '';
                    updateTagButtonsUI();
                    fetchData(`/renderpage?tags=${encodeURIComponent(activeTag)}`);
                    if (window.innerWidth < 1024) {
                        sidebar.classList.add('-translate-x-full');
                        sidebar.classList.remove('shadow-2xl');
                    }
                }
            });

            endpointListSection.addEventListener('click', function(e) {
                const tryButton = e.target.closest('.try-button');
                if (tryButton) {
                    const data = tryButton.getAttribute('data-endpoint');
                    if (data) {
                        try {
                            const endpoint = JSON.parse(data.replace(/\\'/g, "'"));
                            openTryModal(endpoint);
                        } catch(parseError) {
                            console.error("Failed to parse endpoint data:", parseError, "Data:", data);
                            alert("Error: Data endpoint tidak valid atau rusak.");
                        }
                    }
                }
            });

            runButton.addEventListener('click', function() {
                if (loadingIndicator.style.display === 'flex' || !currentEndpointData) return;
                runButton.disabled = true;
                runButton.classList.add('opacity-60', 'cursor-not-allowed');
                loadingIndicator.style.display = 'flex';
                resetModalOutput();
                let endpointPath = currentEndpointData.endpoint;
                const queryParams = {};
                let missingRequired = false;
                let firstMissingField = null;
                const inputs = parameterInputsDiv.querySelectorAll('input[name]');
                inputs.forEach(input => {
                    input.classList.remove('border-red-500', 'ring-1', 'ring-red-500');
                    const paramName = input.name;
                    const paramDefinition = currentEndpointData.parameter && Array.isArray(currentEndpointData.parameter) ? currentEndpointData.parameter.find(p => p.params === paramName) : null;
                    const isRequired = paramDefinition && (paramDefinition.opsional === false);
                    const inputValue = input.value.trim();
                    if (isRequired && !inputValue) {
                        missingRequired = true;
                        if (!firstMissingField) firstMissingField = input;
                        input.classList.add('border-red-500', 'ring-1', 'ring-red-500');
                    }
                    if (inputValue) {
                        const placeholder = `{${paramName}}`;
                        if (endpointPath.includes(placeholder)) {
                            endpointPath = endpointPath.replace(new RegExp(placeholder.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g'), encodeURIComponent(inputValue));
                        } else {
                            queryParams[paramName] = inputValue;
                        }
                    }
                });
                if (missingRequired) {
                    alert('Harap isi semua parameter yang ditandai wajib (*).');
                    if (firstMissingField) firstMissingField.focus();
                    runButton.disabled = false;
                    runButton.classList.remove('opacity-60', 'cursor-not-allowed');
                    loadingIndicator.style.display = 'none';
                    return;
                }
                
                const fullRequestUrl = new URL(`${BASE_DOMAIN}${endpointPath}`);
                Object.entries(queryParams).forEach(([key, value]) => { fullRequestUrl.searchParams.append(key, value); });
                finalApiUrl = fullRequestUrl.toString();
                finalUrlTextCode.textContent = finalApiUrl;
                resultUrlDiv.style.display = 'block';

                const axiosConfig = {
                    method: 'get', 
                    url: endpointPath, 
                    baseURL: BASE_DOMAIN,
                    params: queryParams, 
                    responseType: 'arraybuffer',
                    validateStatus: status => status >= 200 && status < 500 
                };
                
                axios(axiosConfig)
                    .then(response => {
                        const headers = response.headers;
                        const contentType = headers['content-type']?.toLowerCase() || '';
                        const status = response.status;
                        let headerString = `Status: ${status} ${response.statusText}\n`;
                        Object.entries(headers).forEach(([key, value]) => { headerString += `${key}: ${value}\n`; });
                        responseHeaderPre.textContent = headerString.trim();
                        apiResponseDiv.style.display = 'block';
                        responseBodyContainer.innerHTML = '';
                        if(copyResponseBodyBtn) copyResponseBodyBtn.style.display = 'none';
                        const responseData = response.data;
                        if (contentType.includes('application/json')) {
                            try {
                                const decoder = new TextDecoder('utf-8');
                                const jsonText = decoder.decode(responseData);
                                const jsonData = JSON.parse(jsonText);
                                const pre = document.createElement('pre');
                                pre.textContent = JSON.stringify(jsonData, null, 2);
                                responseBodyContainer.appendChild(pre);
                                if(copyResponseBodyBtn) {
                                    copyResponseBodyBtn.setAttribute('data-clipboard-target', '#responseBodyContainer pre');
                                    copyResponseBodyBtn.style.display = 'block';
                                }
                                if (jsonData && jsonData.success === false) errorSound.play(); else successSound.play();
                            } catch (e) {
                                responseBodyContainer.innerHTML = `<pre class="text-red-400">[Error: Gagal mem-parse JSON respons]\n${new TextDecoder('utf-8').decode(responseData)}</pre>`;
                                errorSound.play();
                            }
                        } else if (contentType.startsWith('image/')) {
                            const blob = new Blob([responseData], { type: contentType });
                            const imageUrl = URL.createObjectURL(blob);
                            const img = document.createElement('img');
                            img.src = imageUrl; img.alt = "Gambar Respons API";
                            responseBodyContainer.appendChild(img);
                            successSound.play();
                        } else if (contentType.startsWith('video/')) {
                            const blob = new Blob([responseData], { type: contentType });
                            const videoUrl = URL.createObjectURL(blob);
                            const video = document.createElement('video');
                            video.controls = true; video.src = videoUrl;
                            responseBodyContainer.appendChild(video);
                            successSound.play();
                        } else if (contentType.startsWith('audio/')) {
                            if(responseData.byteLength > 0) {
                                const blob = new Blob([responseData], { type: contentType });
                                const audioUrl = URL.createObjectURL(blob);
                                const audio = document.createElement('audio');
                                audio.controls = true; audio.preload = 'metadata'; audio.src = audioUrl;
                                responseBodyContainer.appendChild(audio);
                                successSound.play();
                            } else {
                                responseBodyContainer.innerHTML = `<p class="text-yellow-400 italic text-sm">[Data audio kosong atau tidak valid]</p>`;
                                errorSound.play();
                            }
                        } else if (contentType.startsWith('text/')) {
                            const decoder = new TextDecoder('utf-8');
                            const text = decoder.decode(responseData);
                            const pre = document.createElement('pre');
                            pre.textContent = text;
                            responseBodyContainer.appendChild(pre);
                            if(copyResponseBodyBtn) {
                                copyResponseBodyBtn.setAttribute('data-clipboard-target', '#responseBodyContainer pre');
                                copyResponseBodyBtn.style.display = 'block';
                            }
                            successSound.play();
                        } else {
                            const pre = document.createElement('pre');
                            pre.textContent = `[Menerima data ${contentType || 'tidak dikenal'} - ${responseData.byteLength} bytes]`;
                            pre.className = "text-gray-400 text-sm mb-2";
                            responseBodyContainer.appendChild(pre);
                            try {
                                const blob = new Blob([responseData], { type: contentType });
                                const downloadUrl = URL.createObjectURL(blob);
                                const a = document.createElement('a');
                                a.href = downloadUrl;
                                const disposition = headers['content-disposition'];
                                let filename = 'download_file';
                                if (disposition && disposition.includes('filename=')) {
                                    const filenameMatch = disposition.match(/filename\*?=['"]?([^'";]+)['"]?/);
                                    if (filenameMatch && filenameMatch[1]) { filename = decodeURIComponent(filenameMatch[1]); }
                                } else {
                                    const pathParts = new URL(fullRequestUrl).pathname.split('/');
                                    filename = pathParts[pathParts.length - 1] || 'download_file';
                                    if (!filename.includes('.')) {
                                        const typeParts = contentType.split('/');
                                        const ext = typeParts[1] ? typeParts[1].split('+')[0] : 'bin';
                                        filename += `.${ext}`;
                                    }
                                }
                                a.download = filename;
                                a.textContent = `Unduh File (${filename})`;
                                a.className = 'inline-block bg-blue-600 hover:bg-blue-700 text-white text-sm font-medium px-4 py-2 rounded-md transition duration-150 shadow';
                                responseBodyContainer.appendChild(a);
                                successSound.play();
                            } catch (blobError) {
                                const errorP = document.createElement('p');
                                errorP.textContent = "(Tidak bisa membuat link unduhan)";
                                errorP.className = 'text-red-500 italic text-sm mt-1';
                                responseBodyContainer.appendChild(errorP);
                                errorSound.play();
                            }
                        }
                        let axiosCode = `axios.get('${BASE_DOMAIN}${endpointPath}'`;
                        const axiosParamsForSnippet = {...queryParams};
                        if (Object.keys(axiosParamsForSnippet).length > 0) {
                             axiosCode += `, {\n  params: ${JSON.stringify(axiosParamsForSnippet, null, 2).replace(/\n/g, '\n  ')}`;
                             if (!contentType.includes('application/json') && !contentType.startsWith('text/')) {
                                 axiosCode += `,\n  responseType: 'arraybuffer'`;
                             }
                             axiosCode += `\n}`;
                        } else if (!contentType.includes('application/json') && !contentType.startsWith('text/')) {
                             axiosCode += `, {\n  responseType: 'arraybuffer'\n}`;
                        }
                        axiosCode += `)\n.then(response => {\n  console.log('Status:', response.status);\n  console.log('Headers:', response.headers);\n  console.log('Data:', response.data);\n})\n.catch(error => {\n  console.error('Error:', error.response ? error.response.data : error.message);\n});`;
                        axiosSnippetPre.textContent = axiosCode;
                        axiosExampleDiv.style.display = 'block';
                    })
                    .catch(error => {
                        errorSound.play();
                        console.error('Axios request failed:', error);
                        apiResponseDiv.style.display = 'block';
                        responseHeaderPre.textContent = `Error: ${error.message}`;
                        responseBodyContainer.innerHTML = '';
                        if(copyResponseBodyBtn) copyResponseBodyBtn.style.display = 'none';
                        if (error.response) {
                            let headerString = `Status: ${error.response.status} ${error.response.statusText}\n`;
                            Object.entries(error.response.headers).forEach(([key, value]) => { headerString += `${key}: ${value}\n`; });
                            responseHeaderPre.textContent = headerString.trim();
                            if (error.response.data && error.response.data.byteLength > 0) {
                                const pre = document.createElement('pre');
                                pre.className = "text-red-400";
                                try {
                                    const decoder = new TextDecoder('utf-8');
                                    const errorText = decoder.decode(new Uint8Array(error.response.data));
                                    try { pre.textContent = JSON.stringify(JSON.parse(errorText), null, 2); }
                                    catch (jsonError) { pre.textContent = errorText; }
                                } catch (decodeError) {
                                    pre.textContent = `[Data error biner tidak bisa didekode - ${error.response.data.byteLength} bytes]`;
                                }
                                responseBodyContainer.appendChild(pre);
                                if(copyResponseBodyBtn) {
                                    copyResponseBodyBtn.setAttribute('data-clipboard-target', '#responseBodyContainer pre');
                                    copyResponseBodyBtn.style.display = 'block';
                                }
                            } else {
                                responseBodyContainer.innerHTML = `<p class="text-gray-500 italic">[Tidak ada body respons error]</p>`;
                            }
                        } else if (error.request) {
                            responseBodyContainer.innerHTML = `<p class="text-red-500">Tidak ada respons dari server. Cek koneksi atau URL API.</p>`;
                        } else {
                            responseBodyContainer.innerHTML = `<p class="text-red-500">Error konfigurasi permintaan: ${error.message}</p>`;
                        }
                    })
                    .finally(() => {
                        loadingIndicator.style.display = 'none';
                        runButton.disabled = false;
                        runButton.classList.remove('opacity-60', 'cursor-not-allowed');
                    });
            });
            setupModalTriggers();
            loadTags();
            fetchData('/renderpage?tags=');
        });
    </script>
</body>
</html>